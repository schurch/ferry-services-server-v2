{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Status","CircleWithFill","props","width","height","cx","cy","r","fill","App","useState","services","setServices","useEffect","a","fetch","response","json","map","jsonService","serviceID","service_id","sortOrder","sort_order","area","route","status","sort","b","console","log","fetchServices","className","service","key","Normal","Disrupted","Cancelled","Unknown","CreateStatusCircle","alt","src","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAYKA,E,4EAqHL,SAASC,EAAeC,GACtB,OAAQ,yBAAKC,MAAOD,EAAMC,MAAOC,OAAQF,EAAMC,OAAvC,IAA+C,4BAAQE,GAAIH,EAAMC,MAAQ,EAAGG,GAAIJ,EAAMC,MAAQ,EAAGI,EAAGL,EAAMC,MAAQ,EAAGK,KAAMN,EAAMM,S,SAtHtIR,O,mBAAAA,I,yBAAAA,I,yBAAAA,I,wBAAAA,M,KAyHUS,MA1Gf,WAAgB,IAAD,EACmBC,mBAAoB,IADvC,mBACNC,EADM,KACIC,EADJ,KA0Bb,OAvBAC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,+EAG2BC,MAAM,6CAHjC,cAGUC,EAHV,gBAI0CA,EAASC,OAJnD,OAIUA,EAJV,OAKUN,EAAsBM,EAAKC,KAAI,SAAAC,GAAW,MAC9C,CACEC,UAAWD,EAAYE,WACvBC,UAAWH,EAAYI,WACvBC,KAAML,EAAYK,KAClBC,MAAON,EAAYM,MACnBC,OAAQP,EAAYO,WAErBC,MAAK,SAACb,EAAGc,GAAJ,OAAUd,EAAEQ,UAAYM,EAAEN,aAClCV,EAAYD,GAdhB,kDAgBIkB,QAAQC,IAAR,MAhBJ,2DADc,uBAAC,WAAD,wBAoBdC,KACC,IAGD,6BACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,cAAd,oBACA,wBAAIA,UAAU,gBAAd,wCAIN,yBAAKA,UAAU,+BACb,6BACE,2BAAOA,UAAU,oCACf,+BACE,4BACE,sCACA,wBAAIA,UAAU,iBACd,yCAGJ,+BACGrB,EAASO,KAAI,SAAAe,GAAO,OACnB,wBAAIC,IAAKD,EAAQb,WACf,wBAAIY,UAAU,cAuChC,SAA4BN,GAE1B,OAAQA,GACN,KAAK1B,EAAOmC,OACV,OAAO,kBAAClC,EAAD,CAAgBO,KAAK,UAAUL,MAH5B,KAIZ,KAAKH,EAAOoC,UACV,OAAO,kBAACnC,EAAD,CAAgBO,KAAK,UAAUL,MAL5B,KAMZ,KAAKH,EAAOqC,UACV,OAAO,kBAACpC,EAAD,CAAgBO,KAAK,UAAUL,MAP5B,KAQZ,KAAKH,EAAOsC,QACV,OAAO,kBAACrC,EAAD,CAAgBO,KAAK,UAAUL,MAT5B,MAxC8BoC,CAAmBN,EAAQP,SACvD,6BACA,4BACE,6BAAMO,EAAQT,MACd,6BAAMS,EAAQR,eAO1B,yBAAKO,UAAU,qBACb,yBAAKA,UAAU,YAAYQ,IAAI,+BAA+BC,IAAI,0BAClE,wBAAIT,UAAU,kBAAd,eACA,uBAAGA,UAAU,YAAb,mDACA,6BACE,uBAAGU,KAAK,8DACN,yBAAKV,UAAU,eAAeQ,IAAI,2BAA2BC,IAAI,2BAGrE,6BACE,uBAAGC,KAAK,gFACN,yBAAKV,UAAU,eAAeQ,IAAI,4BAA4BC,IAAI,8BAK1E,yBAAKT,UAAU,4BACb,yBAAKA,UAAU,oCACb,yBAAKA,UAAU,sBACb,uCACA,mDAAwB,uBAAGU,KAAK,kCAAR,2BAAxB,8CC/FQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.bcc86406.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css'\n\ninterface ServiceResponse {\n  service_id: number\n  sort_order: number\n  area: string\n  route: string\n  additional_info: string\n  status: number\n}\n\nenum Status {\n  Normal = 0,\n  Disrupted = 1,\n  Cancelled = 2,\n  Unknown = -99\n}\n\ntype Service = {\n  serviceID: number,\n  sortOrder: number,\n  area: string\n  route: string\n  status: Status\n}\n\nfunction App() {\n  const [services, setServices] = useState<Service[]>([]);\n\n  useEffect(() => {\n    async function fetchServices() {\n      try {\n        // const response = await fetch(\"http://localhost:3001/api/services\");\n        const response = await fetch(\"https://scottishferryapp.com/api/services\");\n        const json: ServiceResponse[] = await response.json();\n        const services: Service[] = json.map(jsonService => (\n          {\n            serviceID: jsonService.service_id,\n            sortOrder: jsonService.sort_order,\n            area: jsonService.area,\n            route: jsonService.route,\n            status: jsonService.status\n          }\n        )).sort((a, b) => a.sortOrder - b.sortOrder);\n        setServices(services);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    fetchServices();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"brandBackgroundContainer\">\n        <div className=\"headerContainer centerContainer\">\n          <div className=\"smallScreenPadding\">\n            <h1 className=\"headerText\">Scottish Ferries</h1>\n            <h2 className=\"subtitleText\">Up-to-date disruption information</h2>\n          </div>\n        </div>\n      </div>\n      <div className=\"centerContainer mainContent\">\n        <div>\n          <table className=\"smallScreenPadding servicesTable\">\n            <thead>\n              <tr>\n                <th >Status</th>\n                <th className=\"spacerColumn\"></th>\n                <th >Service</th>\n              </tr>\n            </thead>\n            <tbody>\n              {services.map(service =>\n                <tr key={service.serviceID}>\n                  <td className=\"statusCell\">{CreateStatusCircle(service.status)}</td>\n                  <td></td>\n                  <td>\n                    <div>{service.area}</div>\n                    <div>{service.route}</div>\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"appLinksContainer\">\n          <img className=\"mainImage\" alt=\"Screenshot of the iPhone app\" src=\"images/screenshot.png\" />\n          <h3 className=\"appBlurbHeader\">Get the App</h3>\n          <p className=\"appBlurb\">Get up-to-date push notifications with the app.</p>\n          <div>\n            <a href=\"https://apps.apple.com/nz/app/scottish-ferries/id861271891\">\n              <img className=\"appLinkImage\" alt=\"The Apple App Store logo\" src=\"images/app-store.png\" />\n            </a>\n          </div>\n          <div>\n            <a href=\"https://play.google.com/store/apps/details?id=com.stefanchurch.ferryservices\">\n              <img className=\"appLinkImage\" alt=\"The Google Pay Store logo\" src=\"images/play-store.png\" />\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"brandBackgroundContainer\">\n        <div className=\"supportContainer centerContainer\">\n          <div className=\"smallScreenPadding\">\n            <h2>Support</h2>\n            <p>Please contact me at <a href=\"mailto:stefan.church@gmail.com\">stefan.church@gmail.com</a> if you have any issues or questions.</p>\n          </div>\n        </div>\n      </div>\n    </div >\n  );\n}\n\nfunction CreateStatusCircle(status: Status) {\n  const width = 20;\n  switch (status) {\n    case Status.Normal:\n      return <CircleWithFill fill=\"#6AB557\" width={width} />\n    case Status.Disrupted:\n      return <CircleWithFill fill=\"#FD940A\" width={width} />\n    case Status.Cancelled:\n      return <CircleWithFill fill=\"#D62A0B\" width={width} />\n    case Status.Unknown:\n      return <CircleWithFill fill=\"#D7D7D7\" width={width} />\n  }\n}\n\nfunction CircleWithFill(props: { fill: string, width: number }) {\n  return (<svg width={props.width} height={props.width}> <circle cx={props.width / 2} cy={props.width / 2} r={props.width / 2} fill={props.fill} /></svg>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}